<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<title>Groovy Help common elements</title>
</head>
<body>
	<!-- Property accessor -->
	<div id="accessor">
		<p>With a properties accessor you can navigate through the
			properties of an instance, as well as their sub-properties and their
			sub-properties and so on. Once you reached the property you are
			interested in, you have to decide how to retrieve it. There are
			several options:</p>
		<ul>
			<li>Retrieve the first property value with <code>.value()</code></li>
			<li>Retrieve a list of all property values with <code>.values()</code></li>
			<li>Retrieve the first property instance or value with <code>.first()</code></li>
			<li>Retrieve a list of all property instances or values with <code>.list()</code></li>
			<li>Iterate over all property instances or values with <code>.each{}</code></li>
		</ul>
		<p>
			Whether you get instances or values with
			<code>first()</code>
			,
			<code>list()</code>
			or
			<code>each{}</code>
			depends on whether the corresponding property has sub-properties of
			its own. If it has sub-properties according to the schema, instances
			will be returned, otherwise directly values.
		</p>
		<p>
			Let's take a look at the following example structure of an instance
			we assume is stored in the variable
			<code>instance</code>
			:
		</p>
		<div>
			<img
				src="example-structure.png" />
		</div>
		<p>
			To retrieve the value of the <i>id</i> property we can use the
			property accessor like this:
		</p>
		<pre><code>instance.p.id.value()</code></pre>
		<p>You can store a value in a variable for later use:</p>
		<pre><code><b>def</b> id = instance.p.id.value()</code></pre>
		<p>All names of the instance can be retrieved like this:</p>
		<pre><code><b>def</b> names = instance.p.name.values()</code></pre>
		<p>
			In this case only the direct values associated to the <i>name</i>
			property are returned.<br />To access both name and language for all
			names we can use
			<code>each</code>
			:
		</p>
		<pre><code>instance.p.name.each {
  nameInstance -&gt;

  <i>// retrieve name</i>
  <b>def</b> name = nameInstance.value
  <i>// retrieve language</i>
  <b>def</b> language = nameInstance.p.language.value()
}</code></pre>
		<p>
			As you see above, you can easily access the value of an instance
			with
			<code>.value</code>
			.
		</p>
		<h3>UI assistance</h3>
		<p>The script editing page offers the possibility to open a tray
			showing the source variables structure. You can use it to browse the
			properties and sub-properties. If you select an element, sample code
			for accessing the property is shown in the text field below, like in
			this example:</p>
		<div>
			<img
				src="source-assist.png" />
		</div>
		<h3>Troubleshooting</h3>
		<p>It may happen that there are <b>multiple properties with the same
			name</b> - to explicitly reference a specific property you can provide
			the namespace of the property like this:</p>
		<pre><code>instance.p.name(<i>'http://my.namespace.com'</i>).value()</code></pre>
	</div>

	<!-- Instance builder -->
	<div id="builder">
		<p>
			To create an instance as result of the script, you have to use the
			so-called builder API. You have to define a closure that describes
			how the instance is structured, which properties should have which
			values and so on, and add it using the
			<code>
				<b>_target</b>
			</code>
			variable.<br /> The most simple of structures - an empty instance -
			can be created like this:
		</p>
		<pre><code><b>_target</b> {

}</code></pre>
		<p>The builder by default creates the instance based on the
			structure defined in the schema. Thus using properties that do not
			exist in the type definition will fail. To get into more detail on
			how the builder API works, let's assume the following structure as
			the schema of our target instance to be created:</p>
		<div>
			<img
				src="example-target.png" />
		</div>
		<p>The structure is quite complex, but let's start with something
			simple: There is a <i>type</i> property which can have a string value - we
			can add a type property with the value <i>test</i> to our instance like this:</p>
		<pre><code><b>_target</b> {
  type(<i>'test'</i>)
}</code></pre>
		<p>
			The <i>type</i> property may occur multiple times, we can easily add
			the property more than once:
		</p>
		<pre><code><b>_target</b> {
  type <i>'test1'</i>
  type <i>'test2'</i>
  type <i>'test3'</i>
}</code></pre>
		<p>
			This creates three <i>type</i> properties in the instance, each with a different
			value. As an alternative to before, here we use a notation without
			brackets.
		</p>
		<p>The builder calls can be mixed with programming constructs, for
			instance could we achieve the same as above using a simple loop:</p>
		<pre><code><b>_target</b> {
  <b>for</b> (i <b>in</b> 1..3) {
    type(<i>'test'</i> + i)
  }
}</code></pre>
		<h3>Creating complex structures</h3>
		<p>
			The type structure also contains a complex <i>name</i> property with
			several sub-properties on multiple levels. Such a nested structure
			can for example be created like this:
		</p>
		<pre><code><b>_target</b> {
  name {
    GeographicalName {
      language <i>'en'</i>
      spelling {
        SpellingOfName {
          text <i>'some name'</i>
        }
      }
    }
  }
}</code></pre>
		<h3>UI assistance</h3>
		<p>The script editing page offers the possibility to open a tray
			showing the target instance structure. You can use it to browse the
			properties and sub-properties. If you select an element, sample code
			for creating an instance with that property is shown in the text
			field below. Select all the properties you want to populate to
			generate a template for the instance creation. To use it just copy
			the sample code to the editor.</p>
		<div>
			<img
				src="target-assist.png" />
		</div>
		<p>
			In addition there is support for content assistance when building an
			instance, it can be triggered with
			<code>Ctrl+Space</code>
			in the Groovy editor. It allows selecting applicable properties to
			build at the current position from a list.
		</p>
		<div>
			<img
				src="target-content-assist.png" />
		</div>
		<h3>Troubleshooting</h3>
		<p>
			In case there are <b>multiple properties with the same name</b> you
			have to reference a specific property explicitly by specifying its
			namespace. This is done through a named parameter <i>namespace</i>
			like in the example below:
		</p>
		<pre><code><b>_target</b> {
  type(<i>'test'</i>, namespace: <i>'http://my.namespace.com'</i>)
}</code></pre>
		<p>
			Another problem that may arise is that <b>property names</b> may be
			<b>conflicting with variables, reserved keywords or other identifiers</b>.
			You can solve this by explicitly calling the builder, which is
			available as the variable
			<code>
				<b>_b</b>
			</code>
			in the script:
		</p>
		<pre><code><b>def</b> type = <i>'test'</i>
<b>_target</b> {
  <b>_b</b>.type type
}</code></pre>
		<p>If you need to use a <b>property name that is a reserved keyword</b> in Groovy, e.g. <i>class</i>, then you need to quote it. For example:</p>
		<pre><code><b>_target</b> {
  <i>'class'</i>(<i>'test'</i>)
}</code></pre>
	</div>

	<!-- Extended information on creating results for type relations -->
	<div id ="type-results">
		<h3>Multiple results</h3>
		<p>
			You can create multiple result instances by simply calling <b>_target</b>
			multiple times. For each call a result instance is created, and you
			can even integrate this with programming logic like loops. For
			example:
		</p>
		<pre><code><b>for</b> (num in 1..3) {
  <b>_target</b> {
    id ( "Feature_$num" )
  }
}</code></pre>
		<h3>Skip instance creation</h3>
		<p>
			If you want to skip creating a result instance for certain reasons,
			you can do so by simply not calling <b>_target</b> in that case.
		</p>
		<p>Alternatively you can also throw a <code>NoResultException</code>, for example:</p>
		<pre><code>if (condition) {
  <b>throw new</b> NoResultException('reason')
}

<b>_target {</b>
  ...
}</code></pre>
	</div>

	<!-- Extended information on creating results for property relations -->
	<div id ="property-results">
		<h3>Multiple results</h3>
		<p>If the target property can occur multiple times, you can return
			multiple results, that will each be represented as an individual
			instance of the target property.</p>
		<p>
			If the result is created as complex instance, you can create multiple
			results by simply calling <b>_target</b> multiple times. For each
			call a result is created, and you can even integrate this with
			programming logic like loops. For example:
		</p>
		<pre><code><b>for</b> (num in 1..3) {
  <b>_target</b> {
    id ( "Feature_$num" )
  }
}</code></pre>
		<p>
			If the results are not instances, but values, multiple results can be
			created by multiple calls to <b>_target</b> as well:
		</p>
		<pre><code><b>for</b> (num in 1..3) {
  <b>_target</b>("Value $num")
}</code></pre>
		<p>
			Alternatively, if you have an array or collection where each entry
			should be a result value, you can convert it to a <code>MultiValue</code>
			and return it:
		</p>
		<pre><code><b>return</b> ['Value 1', 'Value 2', 'Value 3'] <b>as</b> MultiValue</code></pre>
	</div>

	<!-- Builder accessor combination -->
	<div id="builder-accessor">
		<h3>Putting both together</h3>
		<p>Now that we know how accessing properties and building
			instances works, here a small example related to the above structures that
			makes use of both to create a target structure populated with values
			from a source instance:</p>
		<pre><code><b>_target</b> {
  instance.p.name.each { name -&gt;
    <b>def</b> lang = name.p.language.value()
    GeographicalName {
      <b>if</b> (lang) {
        language lang
      }
      spelling {
        SpellingOfName {
          text name.value
        }
      }
    }
  }
}</code></pre>
	</div>

	<!-- Helper functions -->
	<div id="helper-functions">
		<h2>Helper Functions</h2>
		<p><i>hale studio</i> provides the possibility to extend it with helper
			functions that can be conveniently called from Groovy scripts. An
			overview on the available functions can be found in the functions
			tray (see below). Select an individual function to get detailed
			information on:</p>
		<ul>
			<li>What the function does and how it behaves (description)</li>
			<li>How it should be called (description of each parameter and
				if applicable its default value)</li>
			<li>What it returns</li>
		</ul>
		<div>
			<img
				src="helper-function-spec.png" />
		</div>
		<p>
			The functions are accessible through the
			<code>
				<b>_</b>
			</code>
			binding in the script, and are organized in categories/packages.
		</p>
		<p>Generally, if a function supports multiple parameters, you have
			to use the named parameters notation of Groovy. For Example:</p>
		<pre><code><b>_</b>.geom.buffer(geometry: g, distance: 10)</code></pre>
		<p>
			Above the function
			<code>buffer</code>
			in the package
			<code>geom</code>
			is called with two parameters, the variable <i>g</i> as the <i>geometry</i>
			and <i>10</i> as the <i>distance</i>.
		</p>
		<p>
			There is auto-completion available for helper functions as well.
			Auto-completion can be triggered with <b>Ctrl + Space</b>. Make sure
			to start with
			<code>
				<b>_</b>.
			</code>
			, you may have to specify a start character to have a valid script
			for the completion processor to work.
		</p>

		<div>
			<img
				src="auto-complete.png" />
		</div>
	</div>

	<!-- Binding content -->
	<div id="binding-content">
		<h2>Additional binding content</h2>
		<p>Now we know already that the binding allows accessing
			<code><b>_target</b></code>, <code><b>_b</b></code> and, depending on
			which Groovy function you are using either <code><b>_index</b></code>,
			<code><b>_source</b></code> or the source properties. But there are
			further variables you can access.
		</p>
		<ul>
			<li>
				<p>
					<code><b>_sourceTypes</b></code> (not available in <i>GroovyCreate</i>) contain the
					source types in the case of a type function and in the case of a
					property function the source types of the type function in
					which this property function is executed in. It is a List of
					eu.esdihumboldt.hale.common.align.model.impl.TypeEntityDefinition.
				</p>
			</li>
			<li>
				<p>
					<code><b>_targetType</b></code> contains the
					target type in the case of a type function and in the case of a
					property function the target type of the type function in
					which this property function is executed in. It is a
					eu.esdihumboldt.hale.common.align.model.impl.TypeEntityDefinition.
				</p>
			</li>
			<li>
				<p>
					<code><b>_cell</b></code> contains the cell of this function. It is a
					eu.esdihumboldt.hale.common.align.model.Cell
				</p>
			</li>
			<li>
				<p>
					<code><b>_log</b></code> enables the script to log infos/warnings/errors
					during execution. Each method accepts a string and (optionally) a throwable.
					Examples:
				</p>
				<pre><code><b>_log</b>.info(&quot;Executing function!&quot;)
<b>if</b> (badCondition)
  <b>_log</b>.warn(&quot;Bad condition occured!&quot;)
<b>try</b> {
  executeSomething()
} <b>catch</b> (SomeException e) {
  <b>_log</b>.error(&quot;Exception occured!&quot;, e)
}</code></pre>
			</li>
			<li>
				<p>
					<code>
						<b>_project</b>
					</code>
					provides access to project information and variables. The following
					information is available:
				</p>
				<ul>
					<li>The project name: <code><b>_project</b>.name</code></li>
					<li>The project author: <code><b>_project</b>.author</code></li>
					<li>The project description: <code><b>_project</b>.description</code></li>
					<li>Project variables serve to customize a project's behavior. They can be accessed in a number of different ways:
						<ul>
							<li><code>
									<b>_project</b>.vars.NAME
								</code> gets the value of the project variable with the name <code>NAME</code>
								and reports a warning if the variable does not exist.</li>
							<li><code>
									<b>_project</b>.vars['NAME']
								</code> gets the value of the project variable with the name <code>NAME</code>
								and reports a warning if the variable does not exist.</li>
							<li><code>
									<b>_project</b>.vars.get('NAME', 'default')
								</code> gets the value of the project variable with the name <code>NAME</code>
								if it exists, otherwise yields the default value provided as second argument.</li>
							<li><code>
									<b>_project</b>.vars.getOrFail('NAME')
								</code> gets the value of the project variable with the name <code>NAME</code>
								if it exists, otherwise fails with an exception.</li>
						</ul>
					</li>
				</ul>
			</li>
			<li>
				<p>
					Using
					<code>
						<b>_snippets</b>
					</code>
					you can access Groovy snippets that were imported into the project.
					This allows you to keep extensive logic in external files, and
					allows to easily reuse them across different transformation
					scripts.
				</p>
				<p>You can reference a specific Groovy snippet by its identifier
					that you set when importing the snippet. A list of all snippets and
					their identifiers is available in the Project view which also
					allows removing imported snippets.</p>
				<p>A snippet has the same binding available as the
					transformation script you include it in. You can pass additional
					variables to the script that will be added to the binding.</p>
				<p>For calling a snippet there are two recommended ways:</p>
				<ol>
					<li>Run the snippet script or</li>
					<li>run a closure on the snippet script</li>
				</ol>
				<p>In both cases usually the return value of the snippet or
					closure will be used in the transformation script.
					Here are some examples calling a snippet with the identifier <code>util</code>:</p>
				<pre><code><i>// run the snippet</i>
<b>def</b> res1 = <b>_snippets</b>.util()
<i>// run the snippet passing binding variables</i>
<b>def</b> res2 = <b>_snippets</b>.util(limit: 10, verbose: true)
<i>// run a closure</i>
<i>// assuming the snippet defines the method &quot;format&quot;</i>
<b>def</b> res3 = <b>_snippets</b>.util {
  format(source_field)
}
</code></pre>
				<p>There are some restrictions associated with the use of
					snippets:</p>
				<ul>
					<li>Snippets are not supported when used in base alignments,
						as they rely on the snippets being imported into the project.</li>
					<li>If Groovy restrictions have been lifted, they are also not
						applied to external snippets, even if the snippet changed since
						the original import.</li>
				</ul>
				<p>
					<b>Tip: </b>In case you are using the snippet script also in other
					contexts than hale, you can detect within the script if it is run
					in hale with the following check:
				</p>
				<pre><code><b>if</b> (binding.hasVariable('runs_in_hale')) {
  <i>// only do this when run in hale</i>
  ...
}</code></pre>
			</li>
			<li>
				<p>
					<code><b>withCellContext</b></code> provides access to a map unique to each
					cell. For synchronization you should only access the map inside the
					closure like shown in this example:
				</p>
				<pre><code><b>withCellContext</b> {
  <b>def</b> count = it.count
  <b>if</b> (count == null)
    count = 0
  it.count = ++count
  <b>_log</b>.info(&quot;count is &quot; + it.count)
}
</code></pre>
			</li>
			<li>
				<p>
					<code><b>withFunctionContext</b></code> provides access to a map unique to
					each function (all cells of this function). For synchronization you
					should only access the map inside the closure like shown in this example:
				</p>
				<pre><code><b>withFunctionContext</b> {
  <b>def</b> count = it.count
  <b>if</b> (count == null)
    count = 0
  it.count = ++count
  <b>_log</b>.info(&quot;count is &quot; + it.count)
}
</code></pre>
			</li>
			<li>
				<p>
					<code><b>withTransformationContext</b></code> provides access to a map
					unique to the whole transformation. For synchronization you should
					only access the map inside the closure like shown in this example:
				</p>
				<pre><code><b>withTransformationContext</b> {
  <b>def</b> count = it.count
  <b>if</b> (count == null)
    count = 0
  it.count = ++count
  <b>_log</b>.info(&quot;count is &quot; + it.count)
}
</code></pre>
			</li>
		</ul>
		<p class="Note">
			<b>Note:</b> When using one of the transformation contexts that allow
			you to share data between script executions in different places, keep
			in mind that usually no order in which instances are transformed can
			be guaranteed. The only way to influence transformation order is
			setting <a href="PLUGINS_ROOT/eu.esdihumboldt.hale.doc.user/html/concepts/cell_priority.html">cell priorities</a> on type relations.
		</p>
	</div>

	<div id="collectors">
		<h2>Collectors</h2>
		<p>A collector is a helper object that allows you to easily collect information.</p>
		<p>To create a new collector instantiate one like this:</p>
		<pre><code><b>def</b> c = <b>new</b> <a target="_blank" href="https://github.com/halestudio/hale/blob/master/cst/plugins/eu.esdihumboldt.cst.functions.groovy.helpers/src/eu/esdihumboldt/cst/functions/groovy/helpers/util/Collector.java">Collector</a>()</code></pre>
		<p>A collector often is useful for collecting (shared) information in a
			transformation run. Thus a helper method is provided as part of the
			helper functions, that retrieves or creates a collector associated to
			a context map. For example:</p>
		<pre><code><b>withTransformationContext</b> {
  <b>def</b> c = _.context.collector(it)
}</code></pre>
		<h3>Store information</h3>
		<p>In a collector, information is stored based on keys. Most often
			a key is a string, but you can also use other objects as keys.</p>
		<p>
			The following statement adds a value to the key named
			<code>identifiers</code>
			:
		</p>
		<pre><code>c.identifiers &lt;&lt; 'ID1'</code></pre>
		<p>Keys can be used with an arbitrary number of levels:</p>
		<pre><code>c.hydro.rivers.identifiers &lt;&lt; 'ID1'</code></pre>
		<p>Non-string keys (for example numbers or lists) or variables can
			be used as keys by using the squared brackets notation:</p>
		<pre><code>def key = ['foo', 12]
c[key] &lt;&lt; 'bar'
c.hydro.rivers.source[12] &lt;&lt; 'ID1'</code></pre>
		<p>When you know that you deal with a single value instead of
			accumulating values, you can use the assign operator:</p>
		<pre><code>def key = 'identifier'
c[key] = 'ID1'</code></pre>
		<p>There is no need to create keys, the corresponding child
			collectors are created automatically when a key is accessed.</p>
		<h3>Retrieve information</h3>
		<p>To retrieve information from a collector, access is also done
			using the respective keys. By just specifying the keys you get the
			respective child collector. To retrieve values from a collector you can
			call the following methods:</p>
		<ul>
			<li>c.<b>value()</b> retrieves the first value associated to the
				collector, or <code>null</code></li>
			<li>c.<b>values()</b> provides you with the list of objects
				associated to the collector, in the order they were added
			</li>
		</ul>
		<p>Both of the above mentioned methods ignore any child collectors
			and only return the values of the addressed level.</p>
		<p>
			Additionally a collector provides methods to iterate over its values
			and child collectors. To iterate over a collector's values use
			<code>each</code>
			or
			<code>consume</code>
			with one argument:
		</p>
		<pre><code>c.identifiers.each { value ->
  ...
}</code></pre>
		<p>
			The difference between
			<code>each</code>
			and
			<code>consume</code>
			is that when using
			<code>consume</code>
			, the corresponding list of values is reset.
		</p>
		<p>
			When using variable keys it may be desired to be able to iterate over
			all keys (or child collectors) in a collector. For this the
			<code>eachCollector</code>
			method can be used. If only one argument is provided, the child
			collector is passed in, if two arguments are provided the key and the
			respective child collector are passed in:
		</p>
		<pre><code>c.eachCollector { key, child ->
  ...
}</code></pre>
		<p>
			If you are interested in the keys and corresponding child values of a
			collector, you can use
			<code>each</code>
			or
			<code>consume</code>
			with two arguments to iterate over all present keys and the
			respective value lists. For example:
		</p>
		<pre><code>c.each { key, values ->
  values.each { value ->
    ...
  }
}</code></pre>
	</div>
</body>
</html>
