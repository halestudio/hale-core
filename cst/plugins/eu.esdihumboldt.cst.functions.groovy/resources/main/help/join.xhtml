<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<title>Groovy Join</title>
</head>
<body>
	<h1>Groovy Join</h1>
	<div id="help">
		<p>
			The join transformation can be used to map multiple source types to
			one target type. It allows you to combine information from
			instances/objects of different types. Using the <i>Groovy Join</i>
			function you can make use of a Groovy script to control the creation
			of a target instance for a given source instance and the instances it
			is linked to through the Join. This can be combined with using
			regular mapping functions to transform the properties.
		</p>
		<h2>
			<a name="order">Join order</a>
		</h2>
		<p>
			The first step for creating a join transformation is to select the
			order of the source types. For each instance of the topmost type a
			target instance will be created. The following types will be joined in
			order to fill the result with additional information. This can also
			result in several instances of the second type for one particular
			instance of the first type. The third type then can have several
			instances matching one of those instances of the second type (or the
			first type again depending on the <a href="#condition">conditions</a>)
			and so on.
		</p>
		<div>
			<img src="../../eu.esdihumboldt.hale.common.align/help/join_order.png" class="fit" />
		</div>

		<h2>
			<a name="condition">Conditions</a>
		</h2>
		<p>Each type after the first needs at least one join condition on
			the previous types. It can have conditions on only one of the previous
			types but it may also have conditions on several of them. Conditions
			are simple equalities. A property of the joined type is compared to
			the selected property of a base type. If all these conditions are
			equal the instance is used. A particular instance may match more than
			one instance of the previous types and will then be used each time.</p>
		<div>
			<img src="../../eu.esdihumboldt.hale.common.align/help/join_condition.png" class="fit" />
		</div>
		<p>To create a condition, select a property on the left and on the
			right side, then click on the button in the middle.</p>

		<h2>Access source properties</h2>
		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/accessor" />

		<h2>Access joined/linked instances</h2>
		<p>
			With
			<code><b>_source</b></code>
			you get access to the primary source instance. This is an instance of
			the type that is the first in the <i>Join order</i>. Other instances
			may be linked to the primary source instance because they were
			matched to the source instance by the <i>Join conditions</i> you
			specified. Similar to a properties accessor you can also create an
			accessor that allows you to explore these links (e.g.
			<code><b>_source</b>.links</code>
			). It allows you to navigate the linked instances (and their
			respective linked instances) by type. Once you reached the instances
			you are interested in, you can access them and process them either as
			a whole or individually.
		</p>
		<ul>
			<li>Retrieve the first instance with <code>.first()</code></li>
			<li>Retrieve a list of all instances with <code>.list()</code></li>
			<li>Iterate over all instances with <code>.each{}</code></li>
		</ul>
		<p>Following is a screenshot of an example script for a Groovy Join, on the
			right you see the source structure. Note that in addition to the primary source
			properties, at the beginning of the list there is also a type (<i>AX_Flurstueck</i>). This
			is a type that is linked to the primary source type through the Join.</p>
		<div>
			<img
				src="groovy-join.png" />
		</div>
		<p>We can retrieve property values from the primary source as
			usual, for instance as shown in the example in the source structure
			tray:</p>
		<pre><code><b>_source</b>.p.anlass.values()</code></pre>
		<p>
			To retrieve property values from linked <i>AX_Flurstueck</i>
			instances (assuming they have a property
			<code>id</code>
			), we can do something like this:
		</p>
		<pre><code><b>_source</b>.links.AX_Flurstueck.p.id.values()</code></pre>
		<p>
			Note that this accesses all
			<code>id</code>
			property values from all linked <i>AX_Flurstueck</i> instances. To
			process only a single <i>AX_Flurstueck</i> instance at a time, you
			can use
			<code>each</code>
			:
		</p>
		<pre><code><b>_source</b>.links.AX_Flurstueck.each {
  flurstueck -&gt;

  <i>// retrieve id</i>
  <b>def</b> id = flurstueck.p.id.value()
}</code></pre>

		<h2>Build the target instance</h2>
		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/builder" />
		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/type-results" />
		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/builder-accessor" />

		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/helper-functions" />

		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/binding-content" />

		<include
			path="eu.esdihumboldt.cst.functions.groovy/help/common.xhtml/collectors" />
	</div>
</body>
</html>
