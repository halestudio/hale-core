/*
 * A library part of hale-core.
 */

plugins {
  id 'java'
  id 'maven-publish'

  id 'com.diffplug.spotless'

  id 'io.qameta.allure-adapter'

  id 'hale.common'

  // id 'com.github.spotbugs'
}

spotless {
  java {
    toggleOffOn()

    importOrder('java', 'javax', 'org', 'com', '')

    removeUnusedImports()

    // https://github.com/diffplug/spotless/tree/main/plugin-gradle#eclipse-jdt
    eclipse().configFile(rootProject.file('eclipse-format.xml'))

    if (HaleBuild.useDefaultHeader(project)) {
      licenseHeader(HaleBuild.LICENSE_HEADER_DEFAULT)
    }

    trimTrailingWhitespace()
    endWithNewline()
  }
}

/*
spotbugs { // https://github.com/spotbugs/spotbugs-gradle-plugin
  ignoreFailures = false
  showStackTraces = true
  showProgress = false
  reportsDir = file("$buildDir/spotbugs")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    xml {
      enabled = true
    }
    html {
      enabled = true
    }
  }
}
*/

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  all {
    /*
     * Modify dependency resolution for logging dependencies for use of SLF4J and Logback.
     */

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.name == 'commons-logging') {
        // prefer 'jcl-over-slf4j' over 'commons-logging'
        details.useTarget "org.slf4j:jcl-over-slf4j:${libs.versions.slf4j.get()}"
      }
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.name == 'log4j' && details.requested.group == 'log4j') {
        // prefer 'log4j-over-slf4j' over 'log4j'
        details.useTarget "org.slf4j:log4j-over-slf4j:${libs.versions.slf4j.get()}"
      }
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.name == 'log4j-core' && details.requested.group == 'org.apache.logging.log4j') {
        // prefer 'log4j-to-slf4j' over 'log4j-core'
        details.useTarget "org.apache.logging.log4j:log4j-to-slf4j:${libs.versions.log4j2.get()}"
      }
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.name == 'slf4j-jdk14' && details.requested.group == 'org.slf4j') {
        // do not use slf4j-jdk14
        details.useTarget "org.slf4j:slf4j-api:${libs.versions.slf4j.get()}"
      }
    }

    // exclude SLF4J over LOG4J - logback is used
    exclude group: "org.slf4j", module: "slf4j-log4j12"
  }
}

dependencies {
  testRuntimeOnly libs.logback.core
  testRuntimeOnly libs.logback.classic
  testRuntimeOnly project(':common:plugins:eu.esdihumboldt.hale.common.logback.config.test')

  // make offline resources available to all tests
  testRuntimeOnly project(':util:features:eu.esdihumboldt.util.feature.resource')

  // AssertJ + Allure aspect
  testImplementation testLibs.assertj
  testRuntimeOnly testLibs.allure.assertj

  // Spotbugs
  // use version from spotbugs plugin XXX currently not used
  //compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
  compileOnly "com.github.spotbugs:spotbugs-annotations:4.9.6"
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

/*
task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}
*/

/*
 * Publishing to Maven
 *
 * https://docs.gradle.org/current/userguide/publishing_maven.html
 */
publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      // artifact javadocJar
    }
  }

  repositories {
    maven {
      url 'https://artifactory.wetransform.to/artifactory/' +
        (version.endsWith('-SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local')
      credentials {
        username project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : ''
        password project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : ''
      }
    }
  }
}

/*
 * Allure configuration
 *
 * See https://allurereport.org/docs/junit4-configuration/
 */

task generateAllureProperties {
  doLast {
    // Get the first directory of the test resources source set
    def outputDir = sourceSets.test.resources.srcDirs.iterator().next()

    // Specify the name of the generated file
    def outputFile = new File(outputDir, "allure.properties")

    // Create the directory if it doesn't exist
    outputDir.mkdirs()

    def properties = [:]

    // defaults
    properties['allure.link.issue.pattern'] = 'https://github.com/halestudio/hale-core/issues/{}'
    properties['allure.link.JIRA.pattern'] = 'https://wetransform.atlassian.net/browse/{}'
    properties['allure.link.hale.pattern'] = 'https://github.com/halestudio/hale/issues/{}'

    def config = project.hale.allure as AllureConfig

    // derive default epic from project structure
    def p = project.parent?.parent
    def defaultEpic
    if (p != null) {
      switch (p.name) {
        case 'io':
          defaultEpic = 'Import and export formats'
          break
        case 'util':
          defaultEpic = 'Utilities'
          break
        case 'cst':
          defaultEpic = 'Conceptual Schema Transformer'
          break
        case 'ext':
          defaultEpic = 'Extensions'
          break
        case 'common':
          defaultEpic = 'Common libraries'
          break
        case 'app':
          defaultEpic = 'Command line applications'
          break
      }
    }

    if (defaultEpic) {
      properties['allure.label.epic'] = defaultEpic
    }

    // default feature is project name minus common prefix
    def defaultFeature = project.name
    defaultFeature = defaultFeature
      .replaceFirst(/^eu\.esdihumboldt\.cst\./, '')
      .replaceFirst(/^eu\.esdihumboldt\.hale\.app\./, '')
      .replaceFirst(/^eu\.esdihumboldt\.hale\.common\./, '')
      .replaceFirst(/^eu\.esdihumboldt\.hale\.io\./, '')
      .replaceFirst(/^eu\.esdihumboldt\.hale\./, '')
      .replaceFirst(/^eu\.esdihumboldt\.util\./, '')
      .replaceFirst(/^eu\.esdihumboldt\./, '')
    properties['allure.label.feature'] = defaultFeature

    def labels = ['epic', 'story', 'feature']
    labels.each {label ->
      if (config."$label") {
        properties["allure.label.$label"] = config."$label"
      }
    }

    // Write some content to the file
    outputFile.text = properties.collect { "${it.key} = ${it.value}" }.join('\n')
  }
}

processTestResources.dependsOn generateAllureProperties
